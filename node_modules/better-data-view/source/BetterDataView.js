/** @module BetterDataView */

export {BetterDataView, lastOffsets} from "./bdv_objectTemplates.js"

export function writeObject(template, object, toType) {
  const bufferStartSize = 1024
  let dv = new BetterDataView(new ArrayBuffer(bufferStartSize))
  const neededSize = dv.objectSize(template, object)
  if (neededSize > bufferStartSize) {
    dv = new BetterDataView(new ArrayBuffer(neededSize))
  }
  dv.writeObject(template, object)
  return dv.dataUntilPos(toType)
}

// maybe have a map remember last object references including offsets written
export function offsetOf(template, object, key) {
  const offsetList = offsetMap.get(object)
  return offsetList[key]
}

/** A simple file streamer which can be used by BetterDataView (in Node.js) */
export class bdvFileStreamer {
  constructor(fs, filePath, flags) {
    this.fs = fs
    this.fd = fs.openSync(filePath, flags)
  }
  async readBytes(offset, length) {
    const numBytesRead = this.fs.readSync(this.fd, this.ioBuffer, 0, length, offset)
    if (numBytesRead == 0) {
      this.close()
      throw Error('Trying to read past the end of the file.')
    }
    return numBytesRead
  }
  async writeBytes(offset, length) {
    return this.fs.writeSync(this.fd, this.ioBuffer, 0, length, offset)
  }
  close() {
    this.fs.closeSync(this.fd)
    this.closed = true
    this.readBytes = undefined
    this.writeBytes = undefined
  }
}